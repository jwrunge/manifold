name: Release

on:
    push:
        branches:
            - "release"
            - "release/**"

permissions:
    contents: write # For creating releases
    packages: write # For GitHub Packages
    id-token: write # For npm provenance

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    # Run checks via the reusable workflow
    run-checks:
        uses: ./.github/workflows/checks.yml
        with:
            node-version: "24"

    # Build and publish to multiple registries
    release:
        needs: [run-checks]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 24
                  cache: npm
                  registry-url: https://registry.npmjs.org

            - name: Setup Deno
              uses: denoland/setup-deno@v1
              with:
                  deno-version: v1.x

            - name: Install dependencies
              run: npm ci --prefer-offline --no-audit || npm install

            - name: Run transient sync (no commit)
              run: |
                  echo "Running sync script to update deno/jsr in the workspace (transient)"
                  npm run sync:meta

            - name: Build package
              run: npm run build

            - name: Check version and set outputs
              id: version_check
              run: |
                  PACKAGE_VERSION=$(node -p "require('./package.json').version")
                  echo "Current version: $PACKAGE_VERSION"
                  echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

                  # Check if this version exists on npm
                  if npm view mfld@$PACKAGE_VERSION version 2>/dev/null; then
                    echo "Version $PACKAGE_VERSION already exists on npm"
                    echo "should_publish_npm=false" >> $GITHUB_OUTPUT
                  else
                    echo "Version $PACKAGE_VERSION does not exist on npm, proceeding with publish"
                    echo "should_publish_npm=true" >> $GITHUB_OUTPUT
                  fi

            # Publish to NPM
            - name: Publish to NPM
              if: steps.version_check.outputs.should_publish_npm == 'true'
              run: |
                  echo "Publishing version ${{ steps.version_check.outputs.version }} to NPM"
                  npm publish --provenance --access public
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

            # Publish to GitHub Packages
            - name: Setup Node.js for GitHub Packages
              if: steps.version_check.outputs.should_publish_npm == 'true'
              uses: actions/setup-node@v4
              with:
                  node-version: 24
                  registry-url: https://npm.pkg.github.com
                  scope: "@${{ github.repository_owner }}"

            - name: Authenticate with GitHub Packages
              if: steps.version_check.outputs.should_publish_npm == 'true'
              run: |
                  echo "@${{ github.repository_owner }}:registry=https://npm.pkg.github.com" >> ~/.npmrc
                  echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> ~/.npmrc

            - name: Publish to GitHub Packages
              if: steps.version_check.outputs.should_publish_npm == 'true'
              run: |
                  echo "Publishing version ${{ steps.version_check.outputs.version }} to GitHub Packages"
                  echo "Repository owner: ${{ github.repository_owner }}"
                  echo "Repository: ${{ github.repository }}"
                  # Create a temporary package.json with scoped name for GitHub Packages
                  cp package.json package.json.bak
                  node -e "
                    const pkg = require('./package.json');
                    pkg.name = '@${{ github.repository_owner }}/manifold';
                    pkg.publishConfig = { 
                      registry: 'https://npm.pkg.github.com',
                      '@${{ github.repository_owner }}:registry': 'https://npm.pkg.github.com'
                    };
                    console.log('Modified package.json for GitHub Packages:');
                    console.log(JSON.stringify(pkg, null, 2));
                    require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
                  "
                  npm publish --access public
                  mv package.json.bak package.json
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            # Publish to JSR (using OIDC - no token needed!)
            - name: Publish to JSR
              if: steps.version_check.outputs.should_publish_npm == 'true'
              run: |
                  echo "Publishing version ${{ steps.version_check.outputs.version }} to JSR"
                  # Update both JSR and Deno config versions to match package.json via Deno script
                  deno run --allow-read --allow-write scripts/update-release-config.ts
                  # Debug: show what will be published so we can verify DOM types are present
                  echo '--- debug: jsr.json ---'
                  cat jsr.json || true
                  # Use deno publish directly which properly supports --allow-dirty
                  jsr publish || echo "JSR publish failed"

            # Setup Deno Land publishing (via GitHub release)
            - name: Create GitHub Release for Deno Land
              if: steps.version_check.outputs.should_publish_npm == 'true'
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: v${{ steps.version_check.outputs.version }}
                  name: Release v${{ steps.version_check.outputs.version }}
                  body: |
                      ## Release v${{ steps.version_check.outputs.version }}

                      Available on:
                      - NPM: `npm install mfld`
                      - JSR: `deno add @jwrunge/manifold`
                      - GitHub Packages: `npm install @jwrunge/manifold`
                      - Deno Land: `import Manifold from "https://deno.land/x/manifold@v${{ steps.version_check.outputs.version }}/src/main.ts"`
                      - CDN: `https://cdn.jsdelivr.net/npm/mfld@${{ steps.version_check.outputs.version }}/dist/manifold.umd.js`
                  draft: false
                  prerelease: false

            - name: Skip publish (version exists)
              if: steps.version_check.outputs.should_publish_npm == 'false'
              run: |
                  echo "Skipping publish - version already exists on NPM"
                  echo "If you intended to publish a new version, please update the version in package.json"
