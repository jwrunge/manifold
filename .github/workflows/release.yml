name: Release

on:
    push:
        branches: ["release"]

permissions:
    contents: write # For creating releases
    packages: write # For GitHub Packages
    id-token: write # For npm provenance

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    # Run checks via the reusable workflow
    run-checks:
        uses: ./.github/workflows/checks.yml
        with:
            node-version: "24"

    # Build and publish to multiple registries
    release:
        needs: [run-checks]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 24
                  cache: npm
                  registry-url: https://registry.npmjs.org

            - name: Setup Deno
              uses: denoland/setup-deno@v1
              with:
                  deno-version: v1.x

            - name: Install dependencies
              run: npm ci --prefer-offline --no-audit || npm install

            - name: Build package
              run: npm run build

            # Scripts are executable in git; no runtime chmod required

            - name: Check version and set outputs
              id: version_check
              run: |
                  #!/usr/bin/env bash
                  set -euo pipefail

                  PACKAGE_VERSION=$(node -p "require('./package.json').version")
                  echo "Current version: $PACKAGE_VERSION"
                  if [ -n "${GITHUB_OUTPUT-}" ]; then
                    echo "version=$PACKAGE_VERSION" >> "$GITHUB_OUTPUT"
                  else
                    echo "version=$PACKAGE_VERSION"
                  fi

                  if npm view mfld@"$PACKAGE_VERSION" version 2>/dev/null; then
                    echo "Version $PACKAGE_VERSION already exists on npm"
                    if [ -n "${GITHUB_OUTPUT-}" ]; then
                      echo "should_publish_npm=false" >> "$GITHUB_OUTPUT"
                    else
                      echo "should_publish_npm=false"
                    fi
                  else
                    echo "Version $PACKAGE_VERSION does not exist on npm, proceeding with publish"
                    if [ -n "${GITHUB_OUTPUT-}" ]; then
                      echo "should_publish_npm=true" >> "$GITHUB_OUTPUT"
                    else
                      echo "should_publish_npm=true"
                    fi
                  fi

            # Publish to NPM
            - name: Publish to NPM
              if: steps.version_check.outputs.should_publish_npm == 'true'
              run: |
                  echo "Publishing version ${{ steps.version_check.outputs.version }} to NPM"
                  npm publish --provenance --access public
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

            # Publish to GitHub Packages
            - name: Setup Node.js for GitHub Packages
              if: steps.version_check.outputs.should_publish_npm == 'true'
              uses: actions/setup-node@v4
              with:
                  node-version: 24
                  registry-url: https://npm.pkg.github.com
                  scope: "@${{ github.repository_owner }}"

            - name: Authenticate with GitHub Packages (external script)
              if: steps.version_check.outputs.should_publish_npm == 'true'
              run: ./.github/workflows/scripts/auth-github-packages.sh
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}

            - name: Publish to GitHub Packages (external script)
              if: steps.version_check.outputs.should_publish_npm == 'true'
              run: |
                  echo "Publishing version ${{ steps.version_check.outputs.version }} to GitHub Packages"
                  echo "Repository owner: ${{ github.repository_owner }}"
                  echo "Repository: ${{ github.repository }}"
                  cp package.json package.json.bak
                  node ./.github/workflows/scripts/publish-github-packages.js
                  npm publish --access public
                  mv package.json.bak package.json
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}

            # Publish to JSR (using OIDC - no token needed!)
            - name: Publish to JSR
              if: steps.version_check.outputs.should_publish_npm == 'true'
              run: |
                  echo "Publishing version ${{ steps.version_check.outputs.version }} to JSR"
                  # Update both JSR and Deno config versions to match package.json via Deno script
                  deno run --allow-read --allow-write scripts/update-release-config.ts
                  # Use deno publish directly which properly supports --allow-dirty
                  deno publish --allow-dirty || echo "First attempt failed, trying with --allow-slow-types"
                  deno publish --allow-dirty --allow-slow-types || echo "JSR publish failed"

            # Setup Deno Land publishing (via GitHub release)
            - name: Create GitHub Release for Deno Land
              if: steps.version_check.outputs.should_publish_npm == 'true'
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: v${{ steps.version_check.outputs.version }}
                  name: Release v${{ steps.version_check.outputs.version }}
                  body: |
                      ## Release v${{ steps.version_check.outputs.version }}

                      Available on:
                      - NPM: `npm install mfld`
                      - JSR: `deno add @jwrunge/manifold`
                      - GitHub Packages: `npm install @jwrunge/manifold`
                      - Deno Land: `import Manifold from "https://deno.land/x/manifold@v${{ steps.version_check.outputs.version }}/src/main.ts"`
                      - CDN: `https://cdn.jsdelivr.net/npm/mfld@${{ steps.version_check.outputs.version }}/dist/manifold.umd.js`
                  draft: false
                  prerelease: false

            - name: Skip publish (version exists)
              if: steps.version_check.outputs.should_publish_npm == 'false'
              run: |
                  #!/usr/bin/env bash
                  set -euo pipefail

                  echo "Skipping publish - version already exists on NPM"
                  echo "If you intended to publish a new version, please update the version in package.json"
